export function useTimelineWeekMarkers() {
  // Fun√ß√£o para calcular semanas entre duas datas - VERS√ÉO CORRIGIDA
  const calcularSemanas = (data1: string, data2: string): number => {
    // Se alguma data for TBD, retornar 1 semana padr√£o
    if (data1 === 'TBD' || data2 === 'TBD') return 1;
    
    const d1 = new Date(data1);
    const d2 = new Date(data2);
    
    // Calcular diferen√ßa em dias e depois converter para semanas
    const diffTime = Math.abs(d2.getTime() - d1.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    // CORRE√á√ÉO: Se h√° menos de 7 dias, n√£o mostrar tra√ßos de semana
    // S√≥ mostrar tra√ßos se h√° pelo menos 7 dias (1 semana completa) entre as entregas
    if (diffDays < 7) {
      console.log(`üìÖ Entregas muito pr√≥ximas: ${data1} -> ${data2} = ${diffDays} dias (< 7 dias, sem tra√ßos)`);
      return 0; // Retorna 0 para n√£o mostrar tra√ßos
    }
    
    // Para calcular semanas de forma mais precisa: cada 7 dias = 1 semana
    const diffWeeks = Math.floor(diffDays / 7); // Usar floor para semanas completas
    
    console.log(`üìÖ C√°lculo de semanas: ${data1} -> ${data2} = ${diffDays} dias = ${diffWeeks} semanas`);
    
    return diffWeeks;
  };

  // Fun√ß√£o para gerar posi√ß√µes dos tra√ßos baseado nas semanas e pagina√ß√£o
  const gerarPosicoesSemanas = (entregasPagina: any[], todasEntregas: any[], paginaAtual: number) => {
    console.log(`üîç DEBUG - P√°gina ${paginaAtual + 1}:`, {
      entregasPagina: entregasPagina.length,
      todasEntregas: todasEntregas.length,
      entregasPaginaTitulos: entregasPagina.map(e => e.titulo),
      todasEntregasTitulos: todasEntregas.map(e => e.titulo)
    });

    if (entregasPagina.length <= 1) return [];
    
    const posicoes = [];
    const posicaoEntrega1 = 16.67; // 1/6 da tela (primeiro ter√ßo)
    const posicaoEntrega2 = 50;    // 1/2 da tela (segundo ter√ßo)  
    const posicaoEntrega3 = 83.33; // 5/6 da tela (terceiro ter√ßo)
    
    const posEntregas = [posicaoEntrega1, posicaoEntrega2, posicaoEntrega3];
    const entregasPorPagina = 3;
    
    // Calcular √≠ndices das entregas na p√°gina atual no contexto global
    const indiceInicioPagina = paginaAtual * entregasPorPagina;
    
    console.log(`üìç √çndices - In√≠cio da p√°gina: ${indiceInicioPagina}`);
    
    // Processar tra√ßos entre entregas consecutivas da p√°gina atual
    for (let i = 1; i < entregasPagina.length; i++) {
      const entregaAnterior = entregasPagina[i - 1];
      const entregaAtual = entregasPagina[i];
      
      const semanas = calcularSemanas(entregaAnterior.data, entregaAtual.data);
      console.log(`üîó Entre entregas da mesma p√°gina: ${semanas} semanas entre "${entregaAnterior.titulo}" e "${entregaAtual.titulo}"`);
      
      // CORRE√á√ÉO: S√≥ adicionar tra√ßos se h√° pelo menos 1 semana entre as entregas
      if (semanas > 0) {
        // Calcular posi√ß√µes dos tra√ßos entre as entregas
        const posInicio = posEntregas[i - 1];
        const posFim = posEntregas[i];
        const distancia = posFim - posInicio;
        const intervaloPorSemana = distancia / semanas;
        
        // Adicionar tra√ßos para as semanas intermedi√°rias (excluindo in√≠cio e fim)
        for (let j = 1; j < semanas; j++) {
          posicoes.push({
            tipo: 'semana',
            posicao: posInicio + (intervaloPorSemana * j)
          });
        }
      }
    }
    
    // NOVA L√ìGICA: Processar conex√µes entre p√°ginas
    const ultimoIndicePagina = indiceInicioPagina + entregasPagina.length - 1;
    const proximoIndice = ultimoIndicePagina + 1;
    
    console.log(`üìä Verificando conex√£o: √∫ltimo √≠ndice desta p√°gina = ${ultimoIndicePagina}, pr√≥ximo √≠ndice = ${proximoIndice}`);
    
    // Se h√° uma entrega na pr√≥xima p√°gina, calcular tra√ßos de conex√£o
    if (proximoIndice < todasEntregas.length) {
      const ultimaEntregaPagina = entregasPagina[entregasPagina.length - 1];
      const proximaEntrega = todasEntregas[proximoIndice];
      
      if (ultimaEntregaPagina && proximaEntrega) {
        const semanasConexao = calcularSemanas(ultimaEntregaPagina.data, proximaEntrega.data);
        console.log(`üîó CONEX√ÉO CR√çTICA: ${semanasConexao} semanas entre "${ultimaEntregaPagina.titulo}" (${ultimaEntregaPagina.data}) e "${proximaEntrega.titulo}" (${proximaEntrega.data})`);
        
        // CORRE√á√ÉO: S√≥ adicionar tra√ßos de conex√£o se h√° pelo menos 1 semana
        if (semanasConexao > 0) {
          // TODOS os tra√ßos intermedi√°rios devem aparecer nesta p√°gina
          const posUltimaEntrega = posEntregas[entregasPagina.length - 1];
          const espacoRestante = 100 - posUltimaEntrega;
          
          // Para 4 semanas entre 30/08 e 30/09, queremos 4 tra√ßos intermedi√°rios
          // (n√£o subtra√≠mos 1, pois queremos mostrar todas as semanas intermedi√°rias)
          const tracosIntermediarios = semanasConexao;
          
          console.log(`üìè FOR√áANDO ${tracosIntermediarios} tra√ßos ap√≥s a √∫ltima entrega desta p√°gina`);
          console.log(`üìê Posi√ß√£o √∫ltima entrega: ${posUltimaEntrega}%, espa√ßo restante: ${espacoRestante}%`);
          
          if (tracosIntermediarios > 0 && espacoRestante > 0) {
            const intervaloPorTraco = espacoRestante / (tracosIntermediarios + 1); // +1 para dar espa√ßo at√© a borda
            
            for (let j = 1; j <= tracosIntermediarios; j++) {
              const posicao = posUltimaEntrega + (intervaloPorTraco * j);
              console.log(`‚ûï Adicionando tra√ßo ${j}/${tracosIntermediarios} na posi√ß√£o ${posicao.toFixed(2)}%`);
              
              if (posicao <= 95) { // N√£o ultrapassar muito a borda
                posicoes.push({
                  tipo: 'semana',
                  posicao: posicao
                });
              }
            }
          }
        }
      }
    }
    
    console.log(`üìä RESULTADO FINAL - P√°gina ${paginaAtual + 1}: ${posicoes.length} tra√ßos gerados`);
    console.log(`üìç Posi√ß√µes dos tra√ßos:`, posicoes.map(p => `${p.posicao.toFixed(2)}%`));
    
    return posicoes;
  };

  return { gerarPosicoesSemanas };
}

